import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '1.0-SNAPSHOT'
    id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    mavenLocal()
    maven { url "https://maven.nucleoid.xyz" }
    maven { url "https://maven.wispforest.io" }
}

dependencies {
    // To change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
    testAnnotationProcessor(annotationProcessor(modImplementation("io.wispforest:owo-lib:${project.owo_version}")))
    include "io.wispforest:owo-sentinel:${project.owo_version}"
    modImplementation include("eu.pb4:sgui:1.2.0+1.19.3")
    modImplementation include("eu.pb4:placeholder-api:2.0.0-pre.2+1.19.3")
    modImplementation "eu.pb4:polymer-core:0.3.6+1.19.3"
    modImplementation "eu.pb4:polymer-resource-pack:0.3.6+1.19.3"
    modImplementation include("fr.catcore:server-translations-api:1.4.19+1.19.3")

    // Uncomment the following line to enable the deprecated Fabric API modules.
    // These are included in the Fabric API production distribution and allow you to update your mod to the latest modules at a later more convenient time.

    // modImplementation "net.fabricmc.fabric-api:fabric-api-deprecated:${project.fabric_api_version}"
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = archivesBaseName
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        mavenLocal()
        /*maven {
            url = System.getenv().MAVEN_REPO
            credentials(HttpHeaderCredentials) {
                name System.getenv().MAVEN_AUTH_HEADER
                value System.getenv().MAVEN_AUTH_TOKEN
            }
            authentication {
                header(HttpHeaderAuthentication)
            }
        }*/
    }
}

task remapMavenJar(type: RemapJarTask, dependsOn: jar) {
    input = jar.archiveFile
    archiveFileName = "${archivesBaseName}-${project.version}-maven.jar"
    addNestedDependencies = false
}

build.dependsOn remapMavenJar
